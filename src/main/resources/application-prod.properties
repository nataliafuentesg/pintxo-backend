# ============ PROD (Railway + Postgres) ============

# Puerto que exige Railway
server.port=${PORT:8080}

# Datasource (se inyecta por variables en Railway)
spring.datasource.url=${SPRING_DATASOURCE_URL}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME:}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:}

# Hikari (pool de conexiones) ? bajo para entornos con poca RAM
spring.datasource.hikari.pool-name=TascaHikari

# Logs: silencioso en prod
logging.level.org.hibernate.SQL=ERROR
logging.level.org.hibernate.orm.jdbc.bind=ERROR

# Actuator (para health checks)
management.endpoint.health.probes.enabled=true

# CORS prod (ORÍGENES EXACTOS, sin '/' al final)
# Reemplaza <tu-app> por el subdominio real de Railway o quítalo si no lo necesitas
TASCA_CORS_ORIGINS=http://localhost:5175,http://127.0.0.1:5175,https://tasca-front.netlify.app,https://tasca-backend-production.up.railway.app,https://www.tascatapas.com,https://www.tascatapas.com

# App props
tasca.menu.currency=USD

# JWT (SIEMPRE por variables en prod)
tasca.jwt.secret=${JWT_SECRET}
tasca.jwt.expiration-min=${JWT_EXP_MIN:43200}

# Provisionador de Admin (opcional; actívalo solo 1 vez)
# Si usas el runner, setéalas como variables en Railway:
# PROVISION_ADMIN=true, ADMIN_EMAIL, ADMIN_PASSWORD, ADMIN_FIRST, ADMIN_LAST
PROVISION_ADMIN=${PROVISION_ADMIN:false}
ADMIN_EMAIL=${ADMIN_EMAIL:}
ADMIN_PASSWORD=${ADMIN_PASSWORD:}
ADMIN_FIRST=${ADMIN_FIRST:Admin}
ADMIN_LAST=${ADMIN_LAST:Tasca}

spring.jpa.hibernate.ddl-auto=validate
spring.main.web-application-type=servlet
spring.main.lazy-initialization=true

tasca.tz=America/New_York

# Tomcat
server.tomcat.threads.max=100
server.tomcat.threads.min-spare=10
server.tomcat.accept-count=50

# HTTP
server.compression.enabled=true
server.compression.mime-types=application/json,application/xml,text/html,text/plain
server.compression.min-response-size=2048
server.http2.enabled=true

# Hikari (Postgres)
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=2
spring.datasource.hikari.connection-timeout=2000
spring.datasource.hikari.idle-timeout=30000
spring.datasource.hikari.max-lifetime=1800000

# (Opcional) Actuator
management.endpoints.web.exposure.include=health,info,metrics
management.endpoint.health.show-details=when_authorized

